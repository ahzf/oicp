{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "OICP 2.2 Charge Detail Record API v2.1"
  },
  "host": "https://service-qa.hubject.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Charge Detail Record API v2.1 operations",
      "description": "E Roaming Charge Detail Record Controller 22"
    }
  ],
  "paths": {
    "/api/oicp/cdrmgmt/v21/operators/{operatorID}/charge-detail-record": {
      "post": {
        "tags": [
          "Charge Detail Record API v2.1 operations"
        ],
        "summary": "eRoamingChargeDetailRecord",
        "operationId": "sendChargeDetailRecordUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "operatorID",
            "in": "path",
            "description": "operatorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "eRoamingChargeDetailRecord",
            "description": "eRoamingChargeDetailRecord",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ERoamingChargeDetailRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eRoamingAcknowledgement",
            "schema": {
              "$ref": "#/definitions/ERoamingAcknowledgement"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/FaultBody"
            }
          },
          "401": {
            "description": "Call not authorized",
            "schema": {
              "$ref": "#/definitions/OicpERoamingFault"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/OicpERoamingFault"
            }
          },
          "500": {
            "description": "Processing error",
            "schema": {
              "$ref": "#/definitions/FaultBody"
            }
          }
        }
      }
    },
    "/api/oicp/cdrmgmt/v21/providers/{providerID}/get-charge-detail-records-request": {
      "post": {
        "tags": [
          "Charge Detail Record API v2.1 operations"
        ],
        "summary": "eRoamingGetChargeDetailRecords",
        "operationId": "getChargeDetailRecordsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "providerID",
            "in": "path",
            "description": "providerID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "eRoamingGetChargeDetailRecords",
            "description": "eRoamingGetChargeDetailRecords",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ERoamingGetChargeDetailRecords"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eRoamingChargeDetailRecords",
            "schema": {
              "$ref": "#/definitions/ERoamingChargeDetailRecords"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/FaultBody"
            }
          },
          "401": {
            "description": "Call not authorized",
            "schema": {
              "$ref": "#/definitions/OicpERoamingFault"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/OicpERoamingFault"
            }
          },
          "500": {
            "description": "Processing error",
            "schema": {
              "$ref": "#/definitions/FaultBody"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ERoamingAcknowledgement": {
      "type": "object",
      "required": [
        "StatusCode"
      ],
      "properties": {
        "CPOPartnerSessionID": {
          "type": "string",
          "description": "Optional field containing the session id assigned by the CPO to the related operation.",
          "minLength": 0,
          "maxLength": 250
        },
        "EMPPartnerSessionID": {
          "type": "string",
          "description": "Optional field containing the session id assigned by the EMP to the related operation.",
          "minLength": 0,
          "maxLength": 250
        },
        "Result": {
          "type": "boolean",
          "example": false,
          "description": "Message was received, the respective operation was performed or not performed successfully."
        },
        "SessionID": {
          "type": "string",
          "description": "Represents the service process.",
          "pattern": "[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}"
        },
        "StatusCode": {
          "description": "Structured status details.",
          "$ref": "#/definitions/StatusCodeType"
        }
      },
      "description": "The acknowledgement is a message that is sent in response to several requests."
    },
    "ERoamingChargeDetailRecord": {
      "type": "object",
      "required": [
        "EvseID",
        "Identification",
        "SessionEnd",
        "SessionID",
        "SessionStart"
      ],
      "properties": {
        "CPOPartnerSessionID": {
          "type": "string",
          "description": "Optional field containing the session id assigned by the CPO to the related operation.",
          "minLength": 0,
          "maxLength": 250
        },
        "ChargingEnd": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the charging process stopped."
        },
        "ChargingStart": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the charging process started."
        },
        "ConsumedEnergy": {
          "type": "number",
          "description": "The difference between MeterValueEnd and MeterValueStart in kWh."
        },
        "EMPPartnerSessionID": {
          "type": "string",
          "description": "Optional field containing the session id assigned by the EMP to the related operation.",
          "minLength": 0,
          "maxLength": 250
        },
        "EvseID": {
          "type": "string",
          "description": "The ID that identifies the charging spot.",
          "pattern": "^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$"
        },
        "HubOperatorID": {
          "type": "string",
          "description": "Hub operator",
          "pattern": "^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$"
        },
        "HubProviderID": {
          "type": "string",
          "description": "Hub provider",
          "pattern": "^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$"
        },
        "Identification": {
          "description": "Authentication data.",
          "$ref": "#/definitions/Identification"
        },
        "MeterValueEnd": {
          "type": "number",
          "description": "The ending meter value in kWh."
        },
        "MeterValueInBetween": {
          "description": "List of meter values that may have been taken in between (kWh).",
          "$ref": "#/definitions/MeterValueInBetweenDTO"
        },
        "MeterValueStart": {
          "type": "number",
          "description": "The starting meter value in kWh."
        },
        "MeteringSignature": {
          "type": "string",
          "description": "Meta data",
          "minLength": 0,
          "maxLength": 200
        },
        "PartnerProductID": {
          "type": "string",
          "description": "Service specifics like e.g. 'fast charging'.",
          "pattern": "Standardpreis|AC1|AC3|DC|.{0,100}"
        },
        "SessionEnd": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the session ended. E. g. Swipe of RFID or Cable disconnected"
        },
        "SessionID": {
          "type": "string",
          "description": "The Hubject SessionID that identifies the process. Hubject will accept only one CDR per SessionID.",
          "pattern": "^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$"
        },
        "SessionStart": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time at which the session started, e.g. swipe of RFID or cable connected."
        }
      },
      "description": "eRoamingChargeDetailRecord is a message informing about charging process details (e.g. meter values)."
    },
    "ERoamingChargeDetailRecords": {
      "type": "object",
      "properties": {
        "eroamingChargeDetailRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ERoamingChargeDetailRecord"
          }
        }
      }
    },
    "ERoamingGetChargeDetailRecords": {
      "type": "object",
      "required": [
        "From",
        "ProviderID",
        "To"
      ],
      "properties": {
        "From": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the requested time range."
        },
        "ProviderID": {
          "type": "string",
          "description": "The ProviderID is defined by Hubject and is used to identify the EMP.",
          "pattern": "^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$"
        },
        "To": {
          "type": "string",
          "format": "date-time",
          "description": "End of the requested time range."
        }
      }
    },
    "FaultBody": {
      "type": "object",
      "properties": {
        "extendedInfo": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValidationError"
          }
        }
      },
      "description": "FaultBody model"
    },
    "FieldValidationError": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "fieldReference": {
          "type": "string"
        }
      },
      "description": "FieldValidationError model"
    },
    "HashedPINDTO": {
      "type": "object",
      "required": [
        "Function",
        "Value"
      ],
      "properties": {
        "Function": {
          "type": "string",
          "description": "The hash algorithm used to create the hash",
          "enum": [
            "Bcrypt"
          ]
        },
        "LegacyHashData": {
          "description": "Field for hashing data related to OICP v2.1. It is unused in later versions.",
          "$ref": "#/definitions/LegacyHashDataDTO"
        },
        "Value": {
          "type": "string",
          "description": "Hash value created by partner",
          "pattern": "^[0-9A-Za-z\\.+/=\\$]{10,100}$"
        }
      },
      "description": "Hashed pin model"
    },
    "Identification": {
      "type": "object",
      "properties": {
        "PlugAndChargeIdentification": {
          "$ref": "#/definitions/PlugAndChargeIdentificationDTO"
        },
        "QRCodeIdentification": {
          "$ref": "#/definitions/QRCodeIdentificationDTO"
        },
        "RFIDIdentification": {
          "$ref": "#/definitions/RFIDIdentificationDTO"
        },
        "RFIDMifareFamilyIdentification": {
          "$ref": "#/definitions/RFIDmifarefamilyIdentificationDTO"
        },
        "RemoteIdentification": {
          "$ref": "#/definitions/RemoteIdentificationDTO"
        }
      },
      "description": "Identification model"
    },
    "LegacyHashDataDTO": {
      "type": "object",
      "required": [
        "Function"
      ],
      "properties": {
        "Function": {
          "type": "string",
          "description": "Function used for hashing of the PIN at the partner.",
          "enum": [
            "MD5",
            "SHA-1"
          ]
        },
        "Salt": {
          "type": "string",
          "description": "The salt value used by the partner for hashing the PIN.",
          "minLength": 0,
          "maxLength": 100
        },
        "Value": {
          "type": "string",
          "description": "PIN hash at the partner."
        }
      },
      "description": "Data for hashing method for OICP v2.1 hashed PINs. The class is unused in later versions."
    },
    "MeterValueInBetweenDTO": {
      "type": "object",
      "properties": {
        "meterValues": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "OicpERoamingFault": {
      "type": "object",
      "properties": {
        "StatusCode": {
          "description": "Status code",
          "$ref": "#/definitions/StatusCodeType"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        }
      },
      "description": "OicpERoamingFault model"
    },
    "PlugAndChargeIdentificationDTO": {
      "type": "object",
      "required": [
        "EvcoID"
      ],
      "properties": {
        "EvcoID": {
          "type": "string",
          "description": "Contract identifier",
          "pattern": "^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$"
        }
      }
    },
    "QRCodeIdentificationDTO": {
      "type": "object",
      "required": [
        "EvcoID"
      ],
      "properties": {
        "EvcoID": {
          "type": "string",
          "description": "Contract identifier",
          "pattern": "^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$"
        },
        "HashedPIN": {
          "description": "The hashed pin information. This field can be provided only when uploading Authentication data. In Authorization requests this field must be null!",
          "$ref": "#/definitions/HashedPINDTO"
        },
        "PIN": {
          "type": "string",
          "description": "The pin number, this field is required in Authorization requests!",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "RFIDIdentificationDTO": {
      "type": "object",
      "required": [
        "RFID",
        "UID"
      ],
      "properties": {
        "EvcoID": {
          "type": "string",
          "description": "Contract identifier",
          "pattern": "^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$"
        },
        "ExpiryDate": {
          "type": "string",
          "format": "date-time",
          "description": "Until when this card is valid. Should not be set if card does not have an expiration yet"
        },
        "PrintedNumber": {
          "type": "string",
          "description": "A number printed on a customer’s card for manual authorization (e.q. via a call center)",
          "minLength": 0,
          "maxLength": 150
        },
        "RFID": {
          "type": "string",
          "description": "The Type of the used RFID card like mifareclassic, desfire",
          "enum": [
            "mifareCls",
            "mifareDes",
            "calypso",
            "nfc",
            "mifareFamily"
          ]
        },
        "UID": {
          "type": "string",
          "description": "The UID from the RFID-Card. It should be read from left to right using big-endian format.",
          "pattern": "^([0-9A-F]{8,8}|[0-9A-F]{14,14}|[0-9A-F]{20,20})$"
        }
      }
    },
    "RFIDmifarefamilyIdentificationDTO": {
      "type": "object",
      "required": [
        "UID"
      ],
      "properties": {
        "UID": {
          "type": "string",
          "description": "The UID from the RFID-Card. It should be read from left to right using big-endian format.",
          "pattern": "^([0-9A-F]{8,8}|[0-9A-F]{14,14}|[0-9A-F]{20,20})$"
        }
      }
    },
    "RemoteIdentificationDTO": {
      "type": "object",
      "required": [
        "EvcoID"
      ],
      "properties": {
        "EvcoID": {
          "type": "string",
          "description": "Contract identifier",
          "pattern": "^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$"
        }
      }
    },
    "StatusCodeType": {
      "type": "object",
      "required": [
        "Code"
      ],
      "properties": {
        "AdditionalInfo": {
          "type": "string",
          "description": "More information can be provided here.",
          "minLength": 0,
          "maxLength": 1000
        },
        "Code": {
          "type": "string",
          "description": "To be selected from valid range.",
          "enum": [
            "000",
            "001",
            "002",
            "009",
            "017",
            "018",
            "019",
            "021",
            "022",
            "101",
            "102",
            "103",
            "105",
            "106",
            "110",
            "120",
            "121",
            "122",
            "200",
            "210",
            "300",
            "310",
            "320",
            "400",
            "501",
            "510",
            "601",
            "602",
            "603",
            "604",
            "700"
          ]
        },
        "Description": {
          "type": "string",
          "description": "Description.",
          "minLength": 0,
          "maxLength": 200
        }
      },
      "description": "StatusCode model"
    }
  }
}
